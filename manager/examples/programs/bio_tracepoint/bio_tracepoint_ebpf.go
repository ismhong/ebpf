// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// ebpf_prog/bio_tracepoint.elf
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bio_tracepointElf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x4d\x6c\x1b\x55\x10\x9e\xdd\x8d\x7f\x48\x0b\x4d\x83\x02\xd5\xb6\xa5\x6e\x21\x52\x84\x88\x1b\x3b\x81\xf2\x23\x55\x90\x0a\xa8\x50\xa4\x04\xa4\x8a\x8a\x8b\xbb\xb1\x4d\x30\x75\xea\xd8\x5e\x48\x5c\x1f\x9a\x1e\x2a\x95\x1e\x50\x38\x20\x71\xa3\x49\x0f\xf4\x46\x6f\xa9\xb8\xb8\x27\x94\x03\x42\x39\xa1\x1c\x10\xca\x01\xa1\x54\x42\x10\x0e\x08\x0b\x15\x16\xcd\xbe\x6f\xbd\xbb\x13\xbb\x49\xd5\x9c\x78\x87\x8e\xe7\xeb\xf7\xe6\xe7\x7b\xfb\x66\x57\xb9\xf4\xfa\xd8\x1b\xba\xa6\x91\xb7\x34\xfa\x8b\x7c\xcf\x5f\x0b\x3d\xfe\xef\x57\xf1\xef\x5e\xd2\xa8\xf1\x84\xc2\x96\xb1\xa9\x6e\xae\x3b\xca\xae\xc1\xae\xc2\xae\xb8\xb6\x91\x55\xbc\x98\x41\x14\x67\x7f\x11\xbe\x46\xb4\xe6\x38\xce\xb2\x4e\xd4\x45\x44\x57\x48\xd9\x20\xbf\x47\xf0\xd7\xc1\x8f\x77\xe0\x1f\x12\xfc\x7b\x6d\xe2\xc7\xa2\x44\x03\x82\xf7\x2b\x78\x3d\x81\x78\x1e\xdf\x5a\x54\x7d\xf5\x69\x4a\x90\xda\xa2\xea\xf7\x8c\xa6\x93\xc3\xfb\x84\x0e\xbc\x2f\xc2\x7e\xb7\xea\xdf\x5a\xbc\x17\xd2\xa5\xb1\x84\xbc\xba\xea\xbf\x71\xc3\xaf\x7f\xc5\x71\x9c\x03\xe2\x30\x96\xbb\xfc\x7a\x74\xf6\x81\x7f\x0e\xdb\x3a\x8f\x18\xea\xb8\xd8\x54\xf9\x2e\x6e\x6e\xab\xff\xe6\x03\xea\xdf\x6c\xa3\x3f\xeb\x99\x10\xbc\x8d\x00\x4f\xea\x59\x5b\x6c\x42\x3f\xcd\xd5\xcf\xab\x37\xa8\xcb\x66\x1b\x1d\xae\xb8\xcf\x2a\x51\x03\x7d\xf6\xc5\xee\x52\x50\xef\x46\x54\xe1\xb5\xb2\xb2\x47\xa0\xcb\x89\x28\xd1\x86\x41\xd4\x98\x54\xfe\xac\xae\xea\xed\xd3\x0f\x2a\xdd\x0c\x15\x97\x75\x66\xdb\xaf\x73\x5d\xbe\xee\x53\x5d\xaa\xee\x4b\xa3\xd0\x59\x0b\xf0\x02\xf7\x60\x4a\x23\x32\x98\xd7\xab\xfc\xf1\xd7\xfc\xf3\xf3\xf8\xfb\x28\x1c\x57\x0f\xf0\xbc\xf8\xcc\x33\x50\x97\xcb\x43\x7d\xe3\x29\xf0\xd2\x7e\x1f\x2e\x7e\xd4\xd7\x3d\xe1\x6a\x71\x48\x3d\x17\xe8\x77\x0a\xfd\x7a\x7d\xff\x9f\xfa\xd5\x50\x87\xdb\x1f\x2c\x3f\x77\x26\x11\x0d\xf6\x6a\xad\xfa\xcd\xc0\xfd\xf4\xef\xab\xba\xd7\xd6\x92\xba\x27\xd9\x67\x95\x5f\x9b\x8d\xe3\xff\x57\x80\x2b\x3b\x1b\x23\xea\x66\x5d\xcb\x7e\xff\x32\x6f\x48\x57\xad\x83\xae\x9e\x4e\x46\x80\x27\xfa\x77\x75\x45\xff\xe3\xa7\x84\xae\x5a\x07\x5d\xc1\xf3\xe2\x33\xcf\x40\x5d\xde\x73\xe0\xea\xf7\x34\x78\xd0\x71\x16\x3a\x8e\x3f\xee\x9f\x37\xc7\x1f\x4c\x69\xad\x3a\xd9\xaf\xbf\xbc\xda\xd2\x8f\x43\x96\x97\x36\x5c\x9f\xef\xeb\x37\x8e\xe3\xf4\xeb\x5d\xb4\x3f\xd0\x57\x09\x79\xde\x65\x3f\xa1\xd3\x19\x43\xe9\x5a\x5e\xba\xfb\x80\xfb\xb4\xd0\x73\x58\x35\xbf\x73\xf7\x57\xcd\x1f\x55\x3d\x71\x85\xd7\xaf\xdd\x69\x3b\x5f\x3b\xcd\x91\x3e\x52\x82\xd7\xb4\xf0\xf3\x54\x37\xdb\xc7\x09\xce\xe9\x3b\x3b\x98\xd3\xf5\x6b\xb7\xb7\xc4\x69\x37\xdf\xb7\xaf\xa7\x7d\x9c\x60\x3d\xb7\x77\xf2\xde\xd0\x88\x0e\x06\xef\xc1\x2e\xe9\xb6\xcf\x52\x76\xb7\x74\xe3\x3a\x7b\x82\xdf\x11\x0f\xa9\xe3\xbe\xb2\x57\xdf\xee\xe9\xc8\x73\xe0\xbc\x79\xcb\x8d\xc7\xfc\xfc\x85\x6c\x8d\x7f\x0f\x9e\xec\xcf\xd5\xcd\x9b\x2d\x3c\x77\xbe\xe0\x4e\xe1\x44\xd1\xb2\xeb\xe6\xf5\x16\x9e\xa8\x16\x2e\xf2\xef\xfc\xe0\xc9\xfe\xba\xf9\x85\x1f\x27\x51\x9a\xf1\xe3\x2c\xb4\xf0\x4c\xb6\x34\xcd\xbf\x67\x8a\x79\xbb\x6e\x5e\x6d\xe1\x93\xc5\x92\xfb\x76\x3d\x9f\xa9\x94\xeb\xe6\xbc\x8b\x97\x6f\xa8\xfb\x11\x7c\x1f\xcf\xe3\x7d\xcc\xa3\xb4\x61\x2b\xbc\x91\xf7\xfb\x8a\xee\xf0\xfd\x6b\xb4\xf9\xfe\x60\x1a\x9f\x17\xdf\xee\x9f\x0f\x52\xc7\x15\xe4\xfd\xde\xb3\x3d\xcf\xa5\x0c\x74\xe6\x71\xef\xdc\x37\x6b\xc3\xba\xb0\x76\xac\x1b\x6b\xcb\xba\xb2\xf6\xac\x3b\x9f\x0d\xbb\xdd\xf4\xe6\xc4\x58\xe7\x70\xf4\xa9\xfb\x7d\xf2\x87\x23\xf1\xe7\x5c\x1d\x0c\x4a\x08\x3d\xfa\x80\xcf\x0b\xfc\x13\xd7\x8f\xd0\x6d\x81\xbf\x07\x7c\x5d\xe0\xaf\x00\x3f\xa0\x87\xf1\x47\x81\x4f\x08\xfc\x17\x52\xf8\x9c\xc0\x97\x81\xdf\x14\xf8\x29\xc4\x59\x11\x7d\x7d\x08\x7c\x55\xf0\xdf\x01\xde\x14\xf8\x33\xc0\x07\x8c\x30\xfe\x8f\x97\x57\xe0\x3f\x00\x5f\x15\xf8\x65\xc4\xa1\xae\x30\xfe\x96\x17\x5f\xe0\x87\x80\x7f\x20\xf0\x3f\x11\xff\x96\xc0\xbf\x07\xbe\x21\xf0\xaf\x81\x6f\x0a\x7c\x12\xf1\xcf\x46\xc2\xf8\x30\xf0\x0d\x81\x47\x80\x2f\x44\xc3\xf8\x4f\x88\x3f\x14\x0b\xe3\xdf\x02\x3f\x1d\x0f\xe3\xbf\x01\x3f\x27\x9e\x87\x06\xf0\xab\x02\x9f\x23\xa2\xfd\xf4\x48\xcb\xf7\xda\x78\x9f\x88\x7a\xc9\x2f\x72\x1e\x79\x46\x5d\xdc\x17\x7f\x01\xf1\x34\x37\x8e\x5f\xa4\x77\xc5\xfa\x81\x0f\x08\xfc\x32\xf0\x09\x81\x9f\x0b\xc4\x3b\x46\x44\x6b\x14\xf6\x13\x11\xdf\xe7\xef\xa3\x39\xe1\xdf\x0a\xf8\xfc\x29\x12\x8f\x86\xfd\xb3\x51\xc1\x17\x7e\x53\xf0\x27\x62\x62\x7f\x3c\x5c\xcf\x91\xa7\x12\x47\x8f\x1d\xa6\x42\x29\x83\xa1\x40\x49\x3b\x3f\x67\xd3\xb4\x35\x53\xa5\x64\xb1\xf8\xf1\x74\xc6\xca\xe5\x2a\xd5\xc2\x14\x73\x78\x88\x50\xb2\x92\x2f\xda\x15\x2b\x9b\x9f\x29\x15\x2e\xd8\xc7\xdd\x89\x73\xbc\x35\x77\x0a\xd5\xea\x47\xdb\x71\xbc\xd9\x44\x99\x62\x21\x9b\xbf\x50\xcd\x53\xd5\xb6\x2a\x76\xa6\x92\xcf\x96\x2a\x39\x9a\x2c\x94\x32\xfe\xe6\x64\x96\x92\x55\xbb\x62\x5b\x93\x94\xac\xd6\xa6\xd9\x8e\x8d\x8e\xa6\x32\xc3\x2f\x29\x9b\x82\x7d\x51\x99\x11\xd8\x61\xd8\xb4\x87\x9f\x00\x1d\xf6\x05\xd0\x60\xd3\xb0\x23\xcf\x83\xe6\xda\xa1\xcc\x08\x68\xb0\xe9\x11\x05\x0f\x83\x0d\x9b\x82\x4d\x83\x0d\x9b\x86\x4d\xc1\x8e\xa4\x80\xa7\x28\x59\x29\xe5\x2c\xdb\xe2\xce\x52\x49\xc0\xc3\x43\xa0\x0f\xd1\x43\xaf\x2f\xf1\x5e\x92\xeb\xdf\xc7\x94\xfd\x4c\xdc\x23\xf9\xb7\x8e\xbd\xc0\xc4\x75\xc6\xdf\x3c\xb6\x2e\x31\x3e\x28\xb5\xcd\xfe\x05\x91\x50\x8c\x01\x1a\x24\x0a\xdc\x6a\x7f\x9d\x46\xfd\xde\xab\x72\x0f\xfa\xf4\xf6\x7b\xf8\x99\x0e\xf9\x57\x91\x77\x3e\x7e\xff\xfc\x6f\x77\xc8\x7f\x16\xf9\xaf\x07\xf2\x47\xda\xe4\xef\x45\x7e\x79\x06\x13\xdd\xca\xce\xd1\xfd\xf3\x57\xf0\x9d\x9b\x16\xf8\x0a\xf6\x4b\x5c\x13\xb6\xd6\x21\xff\xdf\xd8\x2f\xcf\x4b\x9e\xff\x93\xbc\x77\xcc\x29\xb1\x54\x41\xbc\x89\xfe\x3d\x5d\xf7\x74\xd8\xff\x15\xbe\x0b\xb7\x2c\x6c\x38\x6d\xf8\xfb\x0e\x07\xfa\x3f\x00\xfb\x5f\x00\x00\x00\xff\xff\x79\xb3\x77\x5a\x90\x13\x00\x00")

func bio_tracepointElfBytes() ([]byte, error) {
	return bindataRead(
		_bio_tracepointElf,
		"bio_tracepoint.elf",
	)
}

func bio_tracepointElf() (*asset, error) {
	bytes, err := bio_tracepointElfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bio_tracepoint.elf", size: 5008, mode: os.FileMode(420), modTime: time.Unix(1596523968, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bio_tracepoint.elf": bio_tracepointElf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bio_tracepoint.elf": &bintree{bio_tracepointElf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
