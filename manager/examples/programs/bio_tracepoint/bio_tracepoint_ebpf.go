// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// ebpf_prog/bio_tracepoint.elf
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bio_tracepointElf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x4d\x6c\x1b\xc5\x17\x7f\xbb\x1b\x7f\xfc\xd3\xfe\x49\x48\x15\x88\xb6\x2d\x75\x5b\x22\x45\x88\xb8\xb1\x13\x5a\x3e\xa4\xaa\xa4\x02\x2a\x14\xa9\x01\x29\x2a\xe2\xe2\xac\xed\x6d\x30\x71\xec\xd8\xbb\x90\x38\x3e\x34\x3d\x54\x2a\x3d\xa0\x70\x40\xe2\x46\x9d\x1e\xc8\x8d\x1c\x90\x12\x71\x71\x4e\x28\x07\x84\x72\x42\x39\x20\x94\x03\x42\x46\x42\x10\x0e\x40\x0e\x45\x8b\xde\xcc\x5b\xef\xee\xab\xdd\xa4\x6a\x4e\xcc\xa1\x6f\xdf\x2f\xbf\x79\x1f\xbf\xd9\x99\xd9\xfa\xc6\x6b\x63\xaf\xab\x8a\x02\xee\x50\xe0\x6f\xf0\x3c\xdf\x78\xd2\x7b\xbc\x44\xff\x1e\x05\x05\xea\x4f\x49\x6c\x8d\x26\x55\xf5\x1d\x47\xda\x6d\xb2\x5b\x64\x37\x85\xad\x67\x24\x2f\xa2\x01\x44\xd1\xaf\x91\xaf\x00\x6c\x3b\x8e\xb3\xa6\x02\x74\x00\xc0\x2d\x90\xd6\xcf\xef\x66\xfc\x1d\xe2\x47\xdb\xf0\x4f\x30\xfe\xfd\x16\xf1\x23\x61\x80\x01\xc6\xfb\x95\x78\xdd\xbe\x78\x2e\xdf\xa8\xc9\xbe\x7a\x95\x6e\x81\x57\x6a\xb2\xdf\x09\x45\x05\x07\xe7\x31\x1d\x70\x5e\x08\xfd\x4e\xd9\xbf\x51\xbb\x1f\xd0\xa5\xbe\x4c\x79\x55\xd9\x7f\xfd\x9e\x57\xff\xa6\xe3\x38\x7d\x6c\x31\xd6\x3a\xbc\x7a\x54\xf4\x09\xff\x94\x6c\x73\x3d\x22\x54\xc7\xc2\x9e\xcc\xb7\xb0\xbb\xaf\xfe\xbb\x8f\xa8\xff\x5e\x0b\xfd\x51\xcf\x18\xe3\x35\x7c\x3c\xae\x67\xa5\xb6\x47\xfa\x29\x42\x3f\xb7\x5e\xbf\x2e\xbb\x2d\x74\xb8\x25\xde\x55\x80\x3a\xf5\xd9\x1b\xf9\x0b\xfc\x7a\xd7\xc3\x12\xaf\x94\xa4\x3d\x45\xba\x5c\x08\x03\x34\x34\x80\x7a\x5a\xfa\x73\xaa\xac\xb7\x57\x3d\x2e\x75\xd3\x64\x5c\xd4\x19\x6d\xbf\x8a\x75\x79\xba\x4f\x75\xc8\xba\x6f\x8c\x92\xce\x8a\x8f\xe7\xdb\x07\x53\x0a\x80\x86\xbc\x1e\xe9\x5f\x7d\xd5\x5b\x3f\x97\xdf\x05\xc1\xb8\xaa\x8f\xe7\xc6\x47\x9e\x46\x75\x09\x1e\xd5\x77\x35\x41\xbc\xa4\xd7\x87\xc0\x4f\x7b\xba\xc7\x84\x16\x27\xe4\x7b\x41\xfd\x4e\x51\xbf\x6e\xdf\xff\xa5\x7e\x15\xaa\x43\xf4\x47\x16\xdf\x3b\x1d\x00\x06\x7b\x94\x66\xfd\xba\x6f\x7f\x1a\x35\xda\x17\x3d\x9e\x3e\x47\x01\xa0\x4f\xe4\x97\x7f\x73\xba\x00\x52\x94\xb7\x7e\x4c\xda\x6b\x1a\x88\xfe\x31\x0f\xf2\xaf\x29\x92\xe8\xd6\xe9\xd6\x85\xf9\x71\x54\x9f\x93\xe7\x46\x86\xce\xc5\xca\x5c\x94\xf0\x4d\xc2\xa5\x9d\x8b\x00\x74\x62\x9e\x92\xa7\x2b\xef\x27\xb0\x5e\x4a\x9b\xf5\x72\xf5\xd7\x7c\x3c\xa6\xab\x58\x2f\xb7\xde\xcb\x6c\xbd\x94\x36\xeb\x45\x3c\x37\x3e\xf2\x34\x5f\x9f\x53\xee\xba\x9c\x25\x1e\xe9\x30\x47\xeb\x73\xf5\x98\xf7\x1e\x61\xfc\xc1\x84\xd2\xac\x13\xfd\xea\xcb\xf2\x5c\xc4\xbf\x63\xc8\xd2\x72\x43\xf8\x78\x0e\x7c\xed\x38\x4e\xbf\xda\x21\xae\x22\xb7\xaf\xe2\x59\x6f\x3d\x94\x98\x0a\x13\x9a\xd4\xb5\xb4\xfc\xcb\x23\xce\x53\x02\xef\xb7\xa5\x7f\x2b\xe6\x5b\xfa\x0f\xb2\x9e\xa8\xc4\xab\x77\x36\x5a\x9e\xdb\xed\xce\xa7\x5e\x90\x82\x57\x94\xe0\x7b\x5a\xd5\x5b\xc7\xf1\x9f\xff\x1b\x07\x38\xff\xab\x77\xd6\x1f\x88\xd3\xea\xde\xd8\xbf\x9e\xd6\x71\xfc\xf5\xac\x1f\xe4\x3e\x52\x00\x8e\xfb\xf6\xd7\x61\xe9\xd6\x65\x48\x7b\x58\xba\x61\x9d\xdd\xfe\xef\x93\xc7\xd4\xb1\xab\xe4\xd6\x77\x78\x3a\xe2\x39\x30\xad\x7f\xd5\xdc\x0f\xd9\x58\xc1\xca\xe8\xab\xc2\xc7\xf9\xb6\x59\x10\xb7\x69\x65\xf0\x62\x7f\x55\x5f\x69\xe2\xd9\xd8\x74\x0e\x9f\xd3\xb1\xbc\x51\xd5\xef\x36\xf1\x98\x95\x5b\xc0\x67\x53\xf0\x3f\x6b\xe2\x66\xac\x38\x8b\xcf\x83\x17\xfb\xb3\x55\x7d\xa9\x89\xa7\x32\xc5\x19\x7c\x9e\xcd\x9b\x76\x55\xbf\xdd\xc4\xd3\xf9\xa2\xc8\x3b\x9d\x2a\x97\xaa\xfa\xa2\xc0\x4b\xf7\xe4\x7e\xf1\xdf\xfb\x8b\x74\xef\x9f\x47\xdc\x96\x78\xdd\xf4\xfa\x0c\x1f\xf0\x9e\xd7\x5a\x7c\xe7\x20\x0d\xd7\x0f\x77\xfb\x4f\xc7\xa1\xed\xf0\xf3\x7e\xef\xde\x9f\x27\x28\x03\xed\x79\xd8\x3b\xf6\x8d\xda\xa0\x2e\xa8\x1d\xea\x86\xda\x9a\xe2\x61\x3a\x87\xba\xe3\xda\x54\x84\x5f\xb0\x3a\xe1\x8d\xf1\xb1\xf6\x21\xc5\xf8\x58\x7c\x0f\xfd\xe1\x70\xfc\x79\xa1\x87\x06\x31\xa6\x4b\x2f\xe1\x8b\x0c\xff\x48\xf8\x21\x58\x67\xf8\xbb\x84\xef\x30\xfc\x15\xc2\xfb\xd4\x20\xfe\x7f\xc2\xc7\x19\xfe\x33\x48\x7c\x9e\xe1\x6b\x84\xaf\x30\xfc\x32\xc5\xd9\x64\x7d\xbd\x4f\xf8\x16\xe3\xbf\x4d\xf8\x1e\xc3\x9f\x25\x7c\x40\x0b\xe2\xff\x50\x5e\xe8\x08\xe2\xdf\x13\x3e\xc0\xf0\x9b\x14\xe7\x1d\x86\xbf\x49\xf8\x22\xc3\x4f\x10\xbe\xc1\xf0\x3f\x29\x7e\x34\x14\xc4\xbf\x23\xfc\x12\xc3\xbf\x24\xfc\x0a\xc3\xd3\x14\x7f\x95\xe1\xc3\x84\x5f\x0a\x07\xf1\x10\xe1\x0d\x86\xff\x48\xf1\x6f\x47\x82\xf8\x37\x84\xaf\x46\x83\xf8\x6f\x84\x4f\xb2\xf7\xa1\xee\xc6\x61\xf8\xbc\xf8\x2f\xe0\xff\x9a\xbe\x2b\xc7\x75\x00\xe8\x01\xaf\xf8\x06\xe5\x19\x15\xb8\xb7\x58\x4b\x14\x4f\x11\x71\xbc\x22\xdd\xad\xd6\x4f\xf8\x00\xc3\x6f\x12\x3e\xce\xf0\x49\x5f\xbc\x33\x00\xb0\x0d\x41\x7f\x3e\xe4\xf9\xf8\xdd\xb4\xc5\xfc\x68\xd8\xf3\xf1\x13\x65\x92\xf9\xab\x61\xc6\x8f\x04\xfd\xf1\x48\x90\xbf\xc2\xfc\x8d\x68\xb0\x9e\x53\xcf\xc4\x4e\x9f\x39\x09\xb9\x62\x8a\xce\x06\x88\xdb\xe6\xbc\x0d\x33\xc6\xac\x05\xf1\x7c\xfe\xc3\x99\x94\x91\xcd\x96\xad\xdc\x14\x72\xf0\x30\x81\x78\xd9\xcc\xdb\x65\x23\x63\xce\x16\x73\x05\xfb\x9c\x38\x79\xce\x35\xcf\x9f\x9c\x65\x7d\xb0\x1f\xc7\x3d\xa3\x20\x95\xcf\x65\xcc\x82\x65\x82\x65\x1b\x65\x3b\x55\x36\x33\xc5\x72\x16\xd2\xb9\x62\xca\x9b\x1c\xcf\x40\xdc\xb2\xcb\xb6\x91\x86\xb8\x55\x99\x41\x3b\x36\x3a\x9a\x48\x0d\xbf\x24\x6d\x82\xec\x8b\xd2\x8c\x90\x1d\x26\x9b\x74\xf1\x0b\x44\x27\x7b\x9e\x68\x64\x93\x64\x47\x5e\x20\x9a\xb0\x43\xa9\x11\xa2\x91\x4d\x8e\x48\x78\x98\xd8\x64\x13\x64\x93\xc4\x26\x9b\x24\x9b\x20\x3b\x92\x20\x3c\x01\xf1\x72\x31\x6b\xd8\x06\x76\x96\x88\x13\x3c\x3c\x44\xf4\x21\x78\xec\xf1\x39\xdd\x4f\x7c\x14\xba\xa4\xfd\x84\xed\x23\xfe\xdb\xca\x51\xc2\xd8\x76\xa6\xdf\x58\x1e\x1c\xec\x18\x82\xc4\x3e\xf3\x97\x58\x42\x76\x0c\xc0\x20\x80\x6f\x57\x7b\x63\xfd\x09\x69\xdd\x2b\xf3\x08\xf5\xe9\xce\x77\xf1\x89\x36\xf9\xb7\x28\x6f\x23\xfa\xf0\xfc\x6f\xb5\xc9\xbf\x49\xf9\xef\xfa\xf2\x87\x5a\xe4\xef\xa1\xfc\x7c\x0d\xd6\x3b\xa5\x9d\x87\x87\xe7\x2f\xd3\xf7\x6f\x92\xe1\x43\x47\xa4\x3d\xcf\x70\x85\xd9\x4a\x9b\xfc\xd7\x69\x3e\x5f\x2f\xbe\xfe\x4f\xe3\xdc\x31\xa7\x08\x00\x8b\x7e\xfc\x3d\x7a\x7f\x5c\x5d\x8f\xb4\x99\xff\x05\x7d\x2f\xf2\x31\x4b\x13\xae\x68\xde\xbc\x93\xbe\xfe\xfb\xc8\xfe\x1b\x00\x00\xff\xff\xb5\xce\x51\x76\x00\x14\x00\x00")

func bio_tracepointElfBytes() ([]byte, error) {
	return bindataRead(
		_bio_tracepointElf,
		"bio_tracepoint.elf",
	)
}

func bio_tracepointElf() (*asset, error) {
	bytes, err := bio_tracepointElfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bio_tracepoint.elf", size: 5120, mode: os.FileMode(420), modTime: time.Unix(1596591470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bio_tracepoint.elf": bio_tracepointElf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bio_tracepoint.elf": &bintree{bio_tracepointElf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
